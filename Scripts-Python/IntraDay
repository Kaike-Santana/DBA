import pyodbc
import pandas as pd
import time
from datetime import datetime, timedelta
import paramiko
from paramiko import SSHClient, AutoAddPolicy
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formatdate

# Função para exibir o tempo de execução de cada step
def exibir_tempo_execucao(step_name, start_time, end_time):
    elapsed_time = end_time - start_time
    print(f"Tempo de execução do step '{step_name}': {elapsed_time:.2f} segundos")

# String de Conexão com o Banco de Dados
conexao_str = "DRIVER={SQL Server};SERVER=wolverine.atmatec.com.br;DATABASE=Data_Science;UID=python;PWD=python@sql"

# Obter a data atual
hoje = datetime.now()

# Calcular a data de um dia atrás (d-1)
data_alvo = hoje - timedelta(days=1)

# Medir o tempo de início da conexão com o banco de dados
inicio_conexao = time.time()

# Conexão com o banco de dados SQL Server
with pyodbc.connect(conexao_str) as conexao:
    # Medir o tempo de término da conexão com o banco de dados
    fim_conexao = time.time()
    exibir_tempo_execucao("Conexão com o banco de dados", inicio_conexao, fim_conexao)

    # Consulta SQL na tabela especificada com a cláusula WHERE utilizando a data desejada
    query = f'''
        Select *
        From Data_Science.Dbo.Tb_Ds_Intraday_Metalfrio
        Where Data = '{data_alvo.strftime('%Y-%m-%d')}'
    '''

    # Medir o tempo de início da execução da consulta SQL
    inicio_consulta = time.time()

    # Executando a consulta
    dadosSQL = pd.read_sql_query(query, conexao)

    # Medir o tempo de término da execução da consulta SQL
    fim_consulta = time.time()
    exibir_tempo_execucao("Execução da consulta SQL", inicio_consulta, fim_consulta)

# Criar um nome para o arquivo concatenando "AAAAMMDD_HHMMSS_TPCALLFLEXFILA" com a data e hora
data_formatada = hoje.strftime('%H%M%S_TPCALLFLEXFILA')
nome_arquivo = f"{data_alvo.strftime('%Y%m%d')}_{data_formatada}.csv"

# Medir o tempo de início da exportação para arquivo CSV
inicio_exportacao = time.time()

# Exportar DataFrame para um arquivo CSV
dadosSQL.to_csv(nome_arquivo, index=False, encoding='utf-8')

# Medir o tempo de término da exportação para arquivo CSV
fim_exportacao = time.time()
exibir_tempo_execucao("Exportação para arquivo CSV", inicio_exportacao, fim_exportacao)

print(f"Arquivo {nome_arquivo} exportado com sucesso!")

# Configurações do servidor de e-mail
smtp_server = 'smtp.office365.com'
smtp_port = 587
email_usuario = 'kaike1010@hotmail.com.br'
email_senha = 'Deus@trino12'
email_destinatarios = ['datascience@atmatec.com.br', 'victor.simoes@atmatec.com.br', 'controldesk@atmatec.com.br']

# Configurar a mensagem de e-mail
subject = "Arquivo Intraday Exportado Para a MetalFrio Com Sucesso"
body = """
<!DOCTYPE html>
<html>
<head>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }}
        .container {{
            background-color: #f4f4f4;
            padding: 20px;
            border-radius: 10px;
            margin: 50px auto;
            width: 70%;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }}
        .header {{
            background-color: #007BFF;
            color: #fff;
            padding: 10px;
            border-radius: 10px 10px 0 0;
            text-align: center;
        }}
        .content {{
            padding: 20px;
        }}
        .footer {{
            background-color: #f4f4f4;
            padding: 10px;
            border-radius: 0 0 10px 10px;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>IntraDay MetalFrio</h1>
        </div>
        <div class="content">
            <p>Prezados,</p>
            <p>Gostaria de informar que o IntraDay foi exportado com sucesso.</p>
            <p>Detalhes da exportação:</p>
            <ul>
                <li><strong>Data e Hora:</strong> {data_hora}</li>
                <li><strong>Nome do Arquivo:</strong> {nome_arquivo}</li>
            </ul>
            <p>Atenciosamente,</p>
        </div>
        <div class="footer">
            <p>Este é um e-mail automatizado. Por favor, não responda a este e-mail.</p>
        </div>
    </div>
</body>
</html>
"""

# Substitui as variáveis no corpo do e-mail
current_datetime = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
body = body.format(data_hora=current_datetime, nome_arquivo=nome_arquivo)

# Configurar a mensagem de e-mail
msg = MIMEMultipart()
msg['From'] = email_usuario
msg['To'] = ', '.join(email_destinatarios)
msg['Subject'] = subject
msg['Date'] = formatdate(localtime=True)
msg.attach(MIMEText(body, 'html'))

# Enviar e-mail usando SMTP
try:
    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(email_usuario, email_senha)
    server.sendmail(email_usuario, email_destinatarios, msg.as_string())
    server.quit()
    print("E-mail enviado com sucesso!")
except Exception as e:
    print("Erro ao enviar e-mail:", e)

# Solicitar ao usuário que insira as informações do servidor SFTP
endereco_sftp = "sftp.atmatec.com.br"
usuario_sftp = "metalfrio"
senha_sftp = "h@7E1W5F0NDa"
caminho_sftp = "/Out/"

# Conexão SSH com o servidor SFTP
client = SSHClient()
client.set_missing_host_key_policy(AutoAddPolicy())
client.connect(endereco_sftp, username=usuario_sftp, password=senha_sftp)

# Envio do arquivo via SFTP
with client.open_sftp() as sftp:
    sftp.put(nome_arquivo, f"{caminho_sftp}/{nome_arquivo}")

print(f"Arquivo {nome_arquivo} enviado para o servidor SFTP com sucesso!")

# Desconectar o cliente SSH
client.close()