

--> BASE ATIVA NÉCTAR
DROP TABLE IF EXISTS #TMP_BASE_ABERTA
SELECT *
INTO #TMP_BASE_ABERTA
FROM OPENQUERY([10.251.1.36],'
SELECT DISTINCT 
 [C].IDEMP_CON
,[D].CGCPF_DEV
,[D].NOME_DEV
,[D].GENERO_DEV
,[C].IDCON_CON
,[C].CONTR_CON

FROM	  [NECTAR].[DBO].[TB_CONTRATO]		[C]		WITH(NOLOCK)
JOIN	  [NECTAR].[DBO].[TB_DEVEDOR]		[D]		WITH(NOLOCK)	ON	[D].IDDEV_DEV		=	[C].IDDEV_CON
LEFT JOIN [NECTAR].[DBO].[TB_TRANSACAO]		[T]		WITH(NOLOCK)	ON	[T].IDCON_TRA		=	[C].IDCON_CON
LEFT JOIN [NECTAR].[DBO].[TB_DOCUMENTO]		[DC]	WITH(NOLOCK)	ON	[DC].IDDOC_DOC		=	[T].IDDOC_TRA
LEFT JOIN [NECTAR].[DBO].[TB_SEGMENTACAO]	[S]		WITH(NOLOCK)	ON	[C].IDSEG_CON		=	[S].IDSEG_SEG
LEFT JOIN [NECTAR].[DBO].[TB_SITUACAO]		[ST]	WITH(NOLOCK)	ON	[ST].IDSIT_SIT		=	[C].IDSIT_CON
WHERE [C].STDEV_CON = 0
AND [ST].IDSIT_SIT NOT IN (40,45)
AND [DC].DESCR_DOC NOT LIKE ''%VENCER%''
AND [DC].DESCR_DOC <> ''PD''')

--> SEPARA PELO TIPO DE EMAIL DO CLIENTE
DROP TABLE IF EXISTS #TMP_EMAIL_ATIVO
SELECT DISTINCT 
 [BA].IDEMP_CON
,[BA].CGCPF_DEV
,[BA].NOME_DEV
,[BA].GENERO_DEV
,[BA].IDCON_CON
,[BA].CONTR_CON
,[B].EMAIL
,LEFT(RIGHT([B].EMAIL,(LEN([B].EMAIL)-CHARINDEX('@',[B].EMAIL))),CHARINDEX('.',RIGHT([B].EMAIL,(LEN([B].EMAIL)-CHARINDEX('@',[B].EMAIL))))-1) DOMINIO
INTO #TMP_EMAIL_ATIVO
FROM #TMP_BASE_ABERTA									[BA]
JOIN REPORTS..TB_EMAIL									[B]		WITH (NOLOCK) ON B.CPF = BA.CGCPF_DEV 
WHERE EMAIL LIKE '%@%' AND EMAIL LIKE '%.COM%'
AND [B].EMAIL NOT LIKE '% %' 
AND [B].EMAIL NOT LIKE '%/%' 
AND [B].EMAIL NOT LIKE '%"%' 
AND [B].EMAIL NOT LIKE '%,%' 
AND [B].EMAIL NOT LIKE '%!%' 
AND [B].EMAIL NOT LIKE '%?%' 
AND [B].EMAIL NOT LIKE '%<%' 
AND [B].EMAIL NOT LIKE '%>%' 
AND [B].EMAIL NOT LIKE '%&%' 
AND [B].EMAIL NOT LIKE '%=%' 
AND [B].EMAIL NOT LIKE '%-%' 
AND [B].EMAIL NOT LIKE '%..%'

AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '% %'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%/%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%"%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%,%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%!%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%?%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%<%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%>%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%&%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%=%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%-%'  
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%..%' 
						 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%0%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%1%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%2%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%3%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%4%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%5%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%6%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%7%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%8%' 
AND RIGHT ([B].EMAIL,LEN([B].EMAIL)-CHARINDEX('@',EMAIL)+1) NOT LIKE '%9%' 


--> FLEGA EMAIL DUPLICADO POR CPF
DROP TABLE IF EXISTS #PRE_BASE
SELECT 
 CGCPF_DEV
,EMAIL
,FLAG_DUPLICADOS	=	ROW_NUMBER() OVER( PARTITION BY EMAIL ORDER BY EMAIL DESC)
INTO #PRE_BASE 
FROM #TMP_EMAIL_ATIVO

--REMOVE EMAIL DUPLICADO POR CPF
DELETE FROM #PRE_BASE WHERE FLAG_DUPLICADOS > 1
ALTER TABLE #PRE_BASE DROP COLUMN FLAG_DUPLICADOS

--> BASE FINAL DE EMAIL
DROP TABLE IF EXISTS #TMP_EMAIL_CUBO 
SELECT 
 CGCPF_DEV
,EMAIL
,ORD_PVT	=	ROW_NUMBER() OVER( PARTITION BY CGCPF_DEV ORDER BY EMAIL DESC)
INTO #TMP_EMAIL_CUBO 
FROM #PRE_BASE

--> WHILE DO MAL
DECLARE @TABELA TABLE  (ID INT PRIMARY KEY)
DECLARE @MAX    INT  = (SELECT MAX(ORD_PVT) FROM #TMP_EMAIL_CUBO)
DECLARE @VALIDA INT
DECLARE @MIN    INT  = 1

WHILE (@MIN <= @MAX)
BEGIN
	INSERT INTO @TABELA (ID) VALUES (@MIN)
	SET @MIN = @MIN + 1
	PRINT 'O CONTADOR ESTA EM:' + ' ' + CONVERT(VARCHAR(10),@MIN - 1)
END

--> SETA VARIÁVEL PARA O MÁXIMO DE ID
SET @VALIDA  = (SELECT MAX(ID) FROM @TABELA)

--> VALIDA SE O MAX DO ID E O MSM DA TABELA!
BEGIN
IF (
	SELECT MAX(ORD_PVT) FROM #TMP_EMAIL_CUBO
   ) != @VALIDA
   RAISERROR('KILLER QUERY', 16,1)
END

--> PIVOT DINAMICO DE QTD DE EMAIL POR CLIENTE
DECLARE @EMAILS NVARCHAR(MAX)  =  STUFF((SELECT ',' + QUOTENAME(ID) FROM @TABELA FOR XML PATH('')),1,1,'')
DECLARE @TSQL   NVARCHAR(MAX)  = 
'SELECT 
		DT_ATUALIZACAO		=	GETDATE()
,		CGCPF_DEV
,		'+@EMAILS+'			
FROM #TMP_EMAIL_CUBO 						
PIVOT(
	  MAX (
		    EMAIL
		  ) 
		 FOR ORD_PVT IN (
					     '+@EMAILS+'
					    )
	 ) PVT
WHERE 1=1'
EXEC (@TSQL)

--> FIM DA BAGUNÇINHA